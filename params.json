{"name":"JFilter","tagline":"Library for processing LDAP-like simple filters.","body":"# Java Filter Library\r\n\r\nThis is a Java library to match POJO against LDAP-like or JSON-like filters.\r\n\r\n\r\n## Maven artefact\r\n\r\n### Release\r\nThe latest released version of the JFilter library artefact is available as:\r\n\r\n``` xml\r\n<dependency>\r\n    <groupId>fr.inria.jfilter</groupId>\r\n    <artifactId>jfilter-library</artifactId>\r\n    <version>1.3</version>\r\n</dependency>\r\n```\r\n\r\n### Snapshot\r\nThe currently developed version of the JFilter library artefact is available as:\r\n\r\n``` xml\r\n<dependency>\r\n    <groupId>fr.inria.jfilter</groupId>\r\n    <artifactId>jfilter-library</artifactId>\r\n    <version>1.4-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n## Maven compilation\r\n\r\nJFilter is a [Maven](http://maven.apache.org \"Maven\") managed project. All you have to do is to invoke the `install` command from the root directory (`JFILTER_DIR`):\r\n\r\n``` bash\r\ncd $JFILTER_DIR\r\nmvn install\r\n```\r\n\r\n\r\n\r\n## API usage\r\n\r\n### LDAP filters\r\n\r\nCurrently, the library supports the following LDAP-like filters:\r\n\r\n| Operator    | Description       | Supported types | Filter example |\r\n|:-----------:|:-----------------:|:----------------| :--------------|\r\n| `=`         | *equals to*       | [String](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html), [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html), [Object](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) | `(firstname = John)` |\r\n| `~`         | *differs from*    | [String](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html), [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html), [Object](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) | `(name ~ Smith)` |\r\n| `>`         | *more than*       | [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html) | `(height > 1.6)` |\r\n| `>=`        | *more or equals*  | [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html) | `(height >= 1.6)` |\r\n| `<`         | *less than*       | [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html) | `(age < 20)` |\r\n| `<=`        | *less or equals*  | [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html) | `(age <= 20)` |\r\n| `!`         | *not*             | Filter          | `!(age<10)` |\r\n| `&`         | *and*             | Filters         | `&(name=Doe)(firstname=John)` |\r\n| `PIPE`      | *or*              | Filters         | `PIPE(age<10)(male=true)` |\r\n| *wildcards* | *matches all*     | [String](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html) | `&(firstname=J*)(name=Do?)` |\r\n| *types*     | *conforms to*     | [Object](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) |  `(objectClass=Person)` |\r\n\r\n\r\n``` java\r\npublic class Person {\r\n    String firstname = \"John\", name = \"Doe\";\r\n\tint age = 20;\r\n\tboolean male = true;\r\n\tdouble height = 1.8 ;\r\n\tAddress home = new Address(); \r\n\t\r\n\tpublic static class Address {\r\n\t    String street = \"Main street\", city = \"New York\";\r\n\t    int postcode = 10014;\r\n\t}\r\n\r\n    public static void main(String[] args) {\r\n        Person x = new Person();\r\n        Collection<Person> col = Collections.singleton(x);\r\n\r\n        Filter filter1 = FilterParser.instance.parse(\"age > 18\");\r\n        if (filter1.match(x)) // Checks if x is an adult\r\n            System.out.println(x.firstname+\" \"+x.name+\" is more than 18 years old.\");\r\n\r\n        Filter filter2 = FilterParser.instance.parse(\"(home.city=New York)\");\r\n        if (filter2.match(x)) // Checks if x matches the LDAP filter\r\n            System.out.println(x.firstname+\"'s lives in \"+x.home.city);\r\n\r\n        Filter filter3 = FilterParser.instance.parse(\"&(firstname=John)(name=D*)\");\r\n        if (filter3.match(x)) // Checks if x matches the LDAP filter\r\n            System.out.println(x.firstname+\"'s name starts by \\\"D\\\"\");\r\n            \r\n        if (filter3.match(col)) // Checks if col matches the LDAP filter\r\n            System.out.println(x.firstname+\"'s name starts by \\\"D\\\"\");\r\n\r\n        // Filters the content of a collection to keep adults\r\n        Collection<Person> adults = filter1.filter(col);\r\n    }\r\n}\r\n```\r\n\r\n### JSON filters\r\nThe library also supports the following JSON-like filters:\r\n\r\n| Operator | Description  | Supported types | Filter example |\r\n|:--------:|:------------:|:----------------| --------------:|\r\n| `:`      | *equals to*  | [String](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html), [Number](http://docs.oracle.com/javase/6/docs/api/java/lang/Number.html), [Object](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) | `{firstname:John}` |\r\n| `,`      | *and*        | Filters         | `{name:Doe,firstname:John}` |\r\n| *wildcards* | *matches*  | [String](http://docs.oracle.com/javase/6/docs/api/java/lang/String.html) | `{firstname:J*,name:Do?}` |\r\n| *types*  | *conforms to* | [Object](http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html) |  `{objectClass:Person}` |\r\n\r\n\r\n``` java\r\npublic class Person {\r\n    String firstname = \"John\", name = \"Doe\";\r\n\tint age = 20;\r\n\tboolean male = true;\r\n\tdouble height = 1.8 ;\r\n\tAddress home = new Address(); \r\n\t\r\n\tpublic static class Address {\r\n\t    String street = \"Main street\", city = \"New York\";\r\n\t    int postcode = 10014;\r\n\t}\r\n\r\n    public static void main(String[] args) {\r\n        Person x = new Person();\r\n        Collection<Person> col = Collections.singleton(x);\r\n\r\n        // Creates a POJO filter from the JSON syntax\r\n        Filter filter1 = FilterParser.instance.parse(\"{name:Doe}\");\r\n            \r\n        if (filter1.match(x)) // Checks if x matches the JSON filter\r\n            System.out.println(x.firstname+\"'s name is \"+x.name);\r\n\r\n        if (filter1.match(col)) // Checks if col matches the JSON filter\r\n            System.out.println(x.firstname+\"'s name is \"+x.name);\r\n            \r\n        // Filters the content of a collection to keep names starting by D\r\n        Filter filter2 = FilterParser.instance.parse(\"{name:D*}\");            \r\n        Collection<Person> named = filter2.filter(col);\r\n    }\r\n}\r\n```\r\n\r\n## Licence\r\n\r\n    Copyright (C) 2013 University Lille 1, Inria\r\n\r\n    This library is free software; you can redistribute it and/or modify\r\n    it under the terms of the GNU Library General Public License as published\r\n    by the Free Software Foundation; either version 2 of the License, or (at\r\n    your option) any later version.\r\n\r\n    This library is distributed in the hope that it will be useful, but WITHOUT\r\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public\r\n    License for more details.\r\n\r\n    You should have received a copy of the GNU Library General Public License\r\n    along with this library; if not, write to the Free Software Foundation,\r\n    Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.","google":"UA-1723287-13","note":"Don't delete this file! It's used internally to help with page regeneration."}